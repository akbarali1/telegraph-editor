"use strict";

function _classCallCheck(a, b) {
    if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
}

function _possibleConstructorReturn(a, b) {
    if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !b || "object" != typeof b && "function" != typeof b ? a : b;
}

function _inherits(a, b) {
    if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
    a.prototype = Object.create(b && b.prototype, {
        constructor: {
            value: a,
            enumerable: !1,
            writable: !0,
            configurable: !0
        }
    }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
}

function _sanitize(a, b) {
    var c = document.createElement("a");
    c.href = a;
    var d = c.href.slice(0, c.href.indexOf(":"));
    return b.indexOf(d) > -1;
}

function relativeUrl(a) {
    var b = location, c = document.createElement("a");
    return c.href = a, b.origin != c.origin ? c.href : b.pathname != c.pathname || b.search != c.search ? c.pathname + c.search + c.hash : b.href == c.href ? c.hash || c.pathname + c.search + c.hash : c.hash;
}

function getFigureValueByUrl(a) {
    var b = void 0;
    if ((b = a.match(/^(https?):\/\/(www\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/i)) || (b = a.match(/^(https?):\/\/(www\.)?youtu\.be\/([a-zA-Z0-9_-]+)/i))) return {
        embed: "https://telegra.ph/embed/youtube?url=" + encodeURIComponent(a)
    };
    if (b = a.match(/^(https?):\/\/(www\.)?vimeo\.com\/(\d+)/i)) return {
        embed: "https://telegra.ph/embed/vimeo?url=" + encodeURIComponent(a)
    };
    if (b = a.match(/^(https?):\/\/(www\.|mobile\.)?twitter\.com\/(.+)\/status\/(\d+)/i)) return {
        embed: "https://telegra.ph/embed/twitter?url=" + encodeURIComponent(a)
    };
    if (b = a.match(/^(https?):\/\/(t\.me|telegram\.me|telegram\.dog)\/([a-zA-Z0-9_]+)\/(\d+)/i)) return {
        embed: "https://telegra.ph/embed/telegram?url=" + encodeURIComponent(a)
    };
    if (b = a.match(/^data:(image\/gif|image\/jpe?g|image\/png|video\/mp4);base64,(.*)$/)) return "video/" == b[1].substr(0, 6) ? {
        video: a
    } : {
        image: a
    };
    if (b = a.match(/^(https?):\/\/\S+/i)) {
        var c = document.createElement("a");
        if (c.href = a, c.pathname.match(/\.(jpe?g|png|gif|mp4)$/i)) return "mp4" == b[1] ? {
            video: a
        } : {
            image: a
        };
    }
    return !1;
}

function _resizeIframe(a, b, c) {
    $("iframe").map(function() {
        var d = null;
        try {
            d = this.contentWindow;
        } catch (e) {}
        if (d && d == a) {
            var f = c / b;
            this.setAttribute("width", "640"), this.setAttribute("height", Math.round(640 * f) + ""), 
            this.parentNode && this.parentNode.classList.contains("iframe_helper") && (this.parentNode.style.paddingTop = 100 * f + "%"), 
            window.quill && quill.updateSelection(Quill.sources.USER);
        }
    });
}

function initQuill() {
    function a(a, b) {
        return [ a, function(a, c) {
            return c.compose(new Delta().retain(c.length(), b));
        } ];
    }
    function b(a) {
        var b = g.scroll.line(a), c = _slicedToArray(b, 2), d = c[0], e = c[1];
        return g.getText(a, d.length() - e);
    }
    function c(a) {
        var c = b(a);
        return !c || "\n" == c;
    }
    function d(a, b, d) {
        var e = void 0, f = b.index;
        b.length > 0 && g.scroll.deleteAt(f, b.length);
        var h = c(f), i = !1, j = g.scroll.descendant(BreakBlot, f), k = _slicedToArray(j, 1);
        if (e = k[0]) (!e.prev || e.prev instanceof BreakBlot) && (g.scroll.deleteAt(--f, 1), 
        i = !0); else {
            var l = g.scroll.descendant(BreakBlot, f - 1), m = _slicedToArray(l, 1);
            e = m[0], e && (g.scroll.deleteAt(--f, 1), i = !0);
        }
        var n = g.scroll.descendant(SingleLineBlot, f), o = _slicedToArray(n, 1);
        if (e = o[0], e || i || !a) g.insertText(f, "\n", Quill.sources.USER), g.setSelection(++f, Quill.sources.USER), 
        (d.format.blockHeader || d.format.blockSubheader || d.format.blockBlockquote || d.format.blockPullquote) && h && g.formatLine(f, 1, {
            blockHeader: !1,
            blockSubheader: !1,
            blockBlockquote: !1,
            blockPullquote: !1
        }, Quill.sources.USER); else {
            g.insertEmbed(f, "textBreak", !0, Quill.sources.USER);
            var p = g.scroll.descendant(BreakBlot, f), q = _slicedToArray(p, 1);
            e = q[0], !e || e.next || e.prev && e.prev instanceof BreakBlot || (g.insertEmbed(++f, "textBreak", !0, Quill.sources.SILENT), 
            g.setSelection(f, 0, Quill.sources.SILENT));
        }
        return g.selection.scrollIntoView(), !1;
    }
    function e(a) {
        var b = g.scroll.line(a.index), c = _slicedToArray(b, 2), d = c[0], e = c[1];
        if (d) {
            var f = d.domNode.innerText, h = f.substr(0, e), i = void 0;
            if (i = h.match(/(^|\s)((?:https?|tg):\/\/\S+|www\.\S+)$/)) {
                var j = i[2], k = j.length;
                "www." == j.substr(0, 4) && (j = "http://" + j);
                var l = g.scroll.descendants(LinkBlot, a.index - k, k);
                l.length || g.formatText(a.index - k, k, "link", j, Quill.sources.USER);
            }
        }
        return !0;
    }
    var f = draftGet();
    f && $("#_tl_editor").html(f);
    var g = new MyQuill("#_tl_editor", {
        readOnly: !0,
        fileSizeLimit: 5242880,
        fileSizeLimitCallback: function() {
            showError("File too big (up to 5 MB allowed)");
        },
        updatePhoto: updatePhoto,
        formats: [ "bold", "italic", "underline", "strike", "code", "link", "textBreak", "blockTitle", "blockAuthor", "blockHeader", "blockSubheader", "blockBlockquote", "blockPullquote", "blockDivider", "blockFigure", "code-block", "list" ],
        modules: {
            clipboard: {
                matchers: [ a("h2", {
                    blockHeader: !0
                }), a("h5", {
                    blockSubheader: !0
                }), a("h6", {
                    blockSubheader: !0
                }), [ "img", function(a, b) {
                    return a.src && _sanitize(a.src, [ "http", "https", "data" ]) ? new Delta().insert({
                        blockFigure: {
                            image: a.src,
                            caption: a.alt || ""
                        }
                    }) : new Delta();
                } ], [ "video", function(a, b) {
                    return a.src && _sanitize(a.src, [ "http", "https", "data" ]) ? new Delta().insert({
                        blockFigure: {
                            video: a.src
                        }
                    }) : new Delta();
                } ], [ "br", function(a, b) {
                    return a.classList.contains("inline") ? new Delta().insert({
                        textBreak: !0
                    }) : b;
                } ] ]
            },
            keyboard: {
                bindings: {
                    indent: {
                        handler: function() {
                            return !0;
                        }
                    },
                    outdent: {
                        handler: function() {
                            return !0;
                        }
                    },
                    tab: {
                        key: Keyboard.keys.TAB,
                        handler: function() {
                            return !0;
                        }
                    },
                    "required enter": {
                        key: Keyboard.keys.ENTER,
                        collapsed: !0,
                        shiftKey: null,
                        format: [ "blockTitle", "blockAuthor" ],
                        suffix: /^$/,
                        handler: function(a, b) {
                            var c = this.quill.scroll.descendant(FieldBlot, a.index), d = _slicedToArray(c, 1), e = d[0];
                            return e && e.next && !$(e.next.domNode).text() ? (this.quill.setSelection(e.next.offset(this.quill.scroll), 0, Quill.sources.USER), 
                            !1) : (this.quill.insertText(a.index, "\n", Quill.sources.USER), !1);
                        }
                    },
                    "required tab prev": {
                        key: Keyboard.keys.TAB,
                        shiftKey: !0,
                        handler: function(a, b) {
                            var c = null;
                            if (a.length > 0) {
                                var d = g.scroll.descendants(Block, a.index, a.length);
                                if (1 != d.length) return !0;
                                c = d[0];
                            } else {
                                var e = g.scroll.descendant(Block, a.index), f = _slicedToArray(e, 1);
                                c = f[0];
                            }
                            if (null != c && null != c.prev && c.prev instanceof FieldBlot) {
                                var h = c.prev.offset(g.scroll), i = c.prev.length();
                                return g.setSelection(h, i > 1 ? i : 0, Quill.sources.USER), !1;
                            }
                            return !0;
                        }
                    },
                    "required tab next": {
                        key: Keyboard.keys.TAB,
                        shiftKey: !1,
                        handler: function(a, b) {
                            var c = null;
                            if (a.length > 0) {
                                var d = g.scroll.descendants(Block, a.index, a.length);
                                if (1 != d.length) return !0;
                                c = d[0];
                            } else {
                                var e = g.scroll.descendant(Block, a.index), f = _slicedToArray(e, 1);
                                c = f[0];
                            }
                            if (null != c && c instanceof FieldBlot && null != c.next) {
                                var h = c.next.offset(g.scroll);
                                if (c.next instanceof FieldBlot) {
                                    var i = c.next.length();
                                    g.setSelection(h, i > 1 ? i : 0, Quill.sources.USER);
                                } else g.setSelection(h, 0, Quill.sources.USER);
                                return !1;
                            }
                            return !0;
                        }
                    },
                    "no tab": {
                        key: Keyboard.keys.TAB,
                        shiftKey: null,
                        handler: function(a, b) {
                            return !1;
                        }
                    },
                    "detect embed": {
                        key: Keyboard.keys.ENTER,
                        collapsed: !0,
                        handler: function(a, b) {
                            var c = g.scroll.line(a.index), d = _slicedToArray(c, 2), e = d[0], f = d[1];
                            if (e) {
                                var h = e.domNode.innerText, i = h.substr(0, f), j = void 0;
                                if (j = i.match(/(^|\s)(https?:\/\/\S+)$/)) {
                                    var k = j[2], l = g.scroll.descendants(LinkBlot, a.index - k.length, k.length);
                                    if (l.length || g.formatText(a.index - k.length, k.length, "link", k, Quill.sources.USER), 
                                    !i.substr(0, f - k.length).trim().length && "P" == e.domNode.tagName) {
                                        var m = getFigureValueByUrl(k);
                                        if (m) {
                                            var n = e.offset(g.scroll);
                                            return g.updateContents(new Delta().retain(n)["delete"](i.length).insert({
                                                blockFigure: m
                                            }), Quill.sources.USER), hideBlocksTooltip(), !1;
                                        }
                                    }
                                }
                            }
                            return !0;
                        }
                    },
                    "divider autofill": {
                        key: Keyboard.keys.ENTER,
                        collapsed: !0,
                        prefix: /^([-*])\1{2,}$/,
                        handler: function(a, b) {
                            var c = g.scroll.line(a.index), d = _slicedToArray(c, 2), e = d[0];
                            d[1];
                            if (e && "P" == e.domNode.tagName) {
                                var f = e.offset(g.scroll), h = new Delta().retain(f)["delete"](e.length()).insert({
                                    blockDivider: !0
                                });
                                return e.next || h.insert("\n"), g.updateContents(h, Quill.sources.USER), !1;
                            }
                            return !0;
                        }
                    },
                    "break": {
                        key: Keyboard.keys.ENTER,
                        shiftKey: !0,
                        handler: d.bind(null, !0)
                    },
                    enter: {
                        key: Keyboard.keys.ENTER,
                        handler: d.bind(null, !1)
                    },
                    "detect link": {
                        key: " ",
                        collapsed: !0,
                        handler: e
                    },
                    "cancel placeholder": {
                        key: Keyboard.keys.ESCAPE,
                        handler: function(a, b) {
                            return checkOncePlaceholder(), this.quill.updateSelection(Quill.sources.USER), !0;
                        }
                    },
                    "list autofill": {
                        key: " ",
                        collapsed: !0,
                        format: {
                            list: !1
                        },
                        prefix: /^(1\.|-|\*)$/,
                        handler: function(a, b) {
                            var c = b.prefix.length;
                            this.quill.scroll.deleteAt(a.index - c, c), this.quill.formatLine(a.index - c, 1, "list", 1 === c ? "bullet" : "ordered", Quill.sources.USER), 
                            this.quill.setSelection(a.index - c, Quill.sources.SILENT);
                        }
                    },
                    "pre wrap": {
                        key: 192,
                        collapsed: !0,
                        format: {
                            "code-block": !1
                        },
                        prefix: /^``$/,
                        offset: 2,
                        handler: function(a, b) {
                            var c = b.prefix.length, d = a.index - c;
                            this.quill.scroll.deleteAt(d, c), this.quill.formatLine(d, 1, "code-block", !0, Quill.sources.USER), 
                            this.quill.setSelection(d, Quill.sources.SILENT);
                        }
                    },
                    code: {
                        key: 192,
                        handler: function(a, b) {
                            if (!b.collapsed) {
                                var c = g.scroll.descendants(Block, a.index, a.length);
                                if (c.length > 1 || 1 == c.length && c[0] instanceof CodeBlock) return this.quill.format("code-block", !b.format["code-block"], Quill.sources.USER), 
                                !1;
                                var d = g.scroll.descendants(BreakBlot, a.index, a.length);
                                if (d.length) return this.quill.format("code-block", !b.format["code-block"], Quill.sources.USER), 
                                !1;
                            }
                            return !(!b.collapsed || b.format.code || /\s$/.test(b.prefix)) || void this.quill.format("code", !b.format.code, Quill.sources.USER);
                        }
                    },
                    "figure delete": {
                        key: Keyboard.keys.BACKSPACE,
                        collapsed: !0,
                        offset: 0,
                        handler: function(a, b) {
                            var c = g.scroll.line(a.index), d = _slicedToArray(c, 2), e = d[0];
                            d[1];
                            return !(e && e.prev && e.prev instanceof FigureBlot) || (b.empty && g.deleteText(a.index, 1, Quill.sources.USER), 
                            g.setSelection(e.prev.offset(g.scroll)), !1);
                        }
                    },
                    "field backspace": {
                        key: Keyboard.keys.BACKSPACE,
                        collapsed: !0,
                        offset: 0,
                        handler: function(a, b) {
                            var c = g.scroll.line(a.index), d = _slicedToArray(c, 2), e = d[0];
                            d[1];
                            return !(e && e.prev && e.prev instanceof FieldBlot && $(e.domNode).text().length > 0);
                        }
                    }
                }
            }
        }
    });
    return g.addContainer($tl_link_tooltip.get(0)), g.addContainer($tl_tooltip.get(0)), 
    g.addContainer($tl_blocks.get(0)), g.on(Quill.events.EDITOR_CHANGE, function(a, b) {
        if (a === Quill.events.SELECTION_CHANGE && g.isEnabled() && null != b) {
            checkFigureBlots(b);
            var c = g.scroll.descendant(Block, b.index), d = _slicedToArray(c, 2), e = d[0];
            d[1];
            0 === b.length ? (hideFormatTooltip(), null == e || e instanceof FieldBlot || e instanceof BlockquoteBlot || e instanceof PullquoteBlot || e instanceof CodeBlock || e instanceof ListItem || $(e.domNode).text().length ? hideBlocksTooltip() : showBlocksTooltip(b)) : (null == e || e instanceof TitleBlot ? hideFormatTooltip() : (showFormatTooltip(b), 
            toolbarUpdate(b)), hideBlocksTooltip());
            var f = g.getFormat(b);
            $tl_article.toggleClass("title_focused", !(!f.blockTitle && !f.blockAuthor)), checkOncePlaceholder();
        }
    }), g.on(Quill.events.TEXT_CHANGE, function() {
        g.getSelection();
        checkRequiredBlots(g), checkBlotPlaceholder(g), checkOncePlaceholder(), draftSave();
    }), g.on(Quill.events.TEXT_PASTE, function() {
        var a = g.getSelection();
        a && e(a);
    }), g.on(Quill.events.SCROLL_OPTIMIZE, function(a) {
        a.forEach(function(a) {
            if ("childList" == a.type && !a.addedNodes.length && a.removedNodes.length) {
                var b = a.previousSibling, c = a.nextSibling;
                if (!c && b && "BR" == b.tagName && "inline" == b.className) {
                    var d = document.createElement("br");
                    d.className = "inline", a.target.appendChild(d);
                } else !c || !b || "BR" == b.tagName && "inline" == b.className || "BR" != c.tagName || "inline" != c.className || c.nextSibling || c.parentNode && c.parentNode.removeChild(c);
            }
        });
    }), g.scroll.domNode.setAttribute("dir", "auto"), $(document).on("click touchstart", function(a) {
        for (var b = a.target; b; ) {
            if (b === g.container) return;
            b = b.parentNode;
        }
        hideFormatTooltip(), hideBlocksTooltip();
    }), checkRequiredBlots(g), checkBlotPlaceholder(g), g;
}

function checkOncePlaceholder() {
    $(".placeholder_once").removeAttr("data-placeholder").removeClass("placeholder_once empty");
}

function checkBlotPlaceholder(a) {
    var b = a.scroll.descendants(Block, 0, a.scroll.length());
    b.forEach(function(a) {
        if (a.domNode.hasAttribute("data-placeholder")) {
            var b = $(a.domNode).text();
            $(a.domNode).toggleClass("empty", !b);
        }
    });
}

function checkRequiredBlots(a) {
    var b = a.scroll.lines(), c = _slicedToArray(b, 2), d = c[0], e = c[1];
    if (d instanceof BlockEmbed) a.updateContents(new Delta().insert("\n", {
        blockTitle: !0
    }).insert("\n", {
        blockAuthor: !0
    }), Quill.sources.SILENT); else if (d instanceof TitleBlot || a.formatLine(0, 1, {
        blockTitle: !0
    }, Quill.sources.SILENT), e) {
        if (e instanceof BlockEmbed) {
            var f = e.offset(a.scroll);
            a.updateContents(new Delta().retain(f).insert("\n", {
                blockAuthor: !0
            }), Quill.sources.SILENT);
        } else if (!(e instanceof AuthorBlot)) {
            var g = e.offset(a.scroll);
            a.formatLine(g, 1, {
                blockAuthor: !0
            }, Quill.sources.SILENT);
        }
    } else {
        var h = a.scroll.length();
        a.updateContents(new Delta().retain(h).insert("\n", {
            blockAuthor: !0
        }), Quill.sources.SILENT);
    }
    var i = a.scroll.lines(), j = _slicedToArray(i, 3), k = j[2];
    if (k) {
        var l = k.offset(a.scroll), m = a.scroll.length() - l, n = a.scroll.descendants(FieldBlot, l, m);
        n.forEach(function(b) {
            var c = b.offset(a.scroll), d = b.length(), e = b.constructor.blotName;
            a.formatText(c, d, e, !1, Quill.sources.SILENT);
        });
    } else {
        var o = a.scroll.length();
        a.insertText(o, "\n", Quill.sources.SILENT);
    }
    var p = a.scroll.lines();
    p.forEach(function(a, b) {
        "P" == a.domNode.tagName && (3 == p.length && 2 == b ? a.domNode.setAttribute("data-placeholder", "Your story...") : a.domNode.removeAttribute("data-placeholder"));
    });
}

function checkFigureBlots(a) {
    var b = quill.scroll.descendant(FigureBlot, a.index), c = _slicedToArray(b, 1), d = c[0], e = quill.scroll.descendants(FigureBlot, 0, quill.scroll.length());
    e.forEach(function(a) {
        d !== a && a.blur();
    }), d && (d.focus(), hideFormatTooltip(), hideBlocksTooltip());
}

function updatePhoto(a, b) {
    return "image/jpg" == a.type || "image/jpeg" == a.type ? loadImage(a, function(c) {
        if ("error" === c.type) b(a); else if (c.toBlob) c.toBlob(function(a) {
            b(a);
        }, a.type); else {
            var d = c.toDataURL(a.type), e = {
                type: a.type,
                base64_data: d.split(",")[1]
            };
            b(uploadDataToBlob(e));
        }
    }, {
        canvas: !0,
        orientation: !0
    }) : void b(a);
}

function uploadDataToBlob(a) {
    for (var b = atob(a.base64_data), c = [], d = 0; d < b.length; d++) c.push(b.charCodeAt(d));
    return new Blob([ new Uint8Array(c) ], {
        type: a.type
    });
}

function _uploadFile(a, b, c, d) {
    var e = new FormData();
    e.append("file", uploadDataToBlob(a)), $.ajax({
        url: "/upload",
        type: "POST",
        data: e,
        cache: !1,
        dataType: "json",
        processData: !1,
        contentType: !1,
        xhr: function f() {
            var f = new XMLHttpRequest();
            return f.upload.addEventListener("progress", function(a) {
                a.lengthComputable && b && b(a.loaded, a.total);
            }), f;
        },
        beforeSend: function(a) {
            b && b(0, 1);
        },
        success: function(a) {
            return a.error ? d && d(a.error) : void $.each(a, function(a, b) {
                c && c(b);
            });
        },
        error: function(a) {
            return d && d("Network error");
        }
    });
}

function wrapDomElement(a) {
    if (!a.tagName) return a.data;
    var b = {
        tag: a.tagName.toLowerCase()
    };
    if (a.attributes.length) {
        b.attrs = {};
        for (var c = 0; c < a.attributes.length; c++) {
            var d = a.attributes[c];
            b.attrs[d.name] = d.value;
        }
    }
    if (a.childNodes.length) {
        b.children = [];
        for (var c = 0; c < a.childNodes.length; c++) b.children.push(wrapDomElement(a.childNodes[c]));
    }
    return b;
}

function getPageContent(a) {
    var b = $(quill.scroll.domNode);
    $("textarea,input", b).map(function() {
        this.setAttribute("data-value", this.value);
    });
    var c = b.clone();
    return $("textarea,input", b).map(function() {
        this.removeAttribute("data-value");
    }), $("textarea,input", c).map(function() {
        this.value = this.getAttribute("data-value"), this.removeAttribute("data-value");
    }), updateEditableText(c, !1), $("[contenteditable]", c).removeAttr("contenteditable"), 
    $("[data-placeholder]", c).removeAttr("data-placeholder"), $("[data-label]", c).removeAttr("data-label"), 
    $("[data-title]", c).removeAttr("data-title"), $(".editable_text", c).removeClass("editable_text"), 
    $(".focus", c).removeClass("focus"), $(".empty", c).removeClass("empty"), $('[class=""]', c).removeAttr("class"), 
    $(".file_progress", c).remove(), $(".cursor_wrapper", c).remove(), a ? ($("h1:not(:has(br)),address:not(:has(br))", c).append("<br>"), 
    c.html()) : ($("h1,address", c).remove(), $("br.inline", c).replaceWith("\n"), {
        data: JSON.stringify(wrapDomElement(c.get(0)).children),
        length: c.html().length
    });
}

function showError(a) {
    $error_msg.text(a), clearTimeout($error_msg.to), $error_msg.addClass("shown"), $error_msg.to = setTimeout(function() {
        $error_msg.removeClass("shown");
    }, 3e3);
}

function savePage() {
    if ($tl_article.hasClass("tl_article_saving")) return !1;
    var a = $("h1", $tl_content).text(), b = $("address", $tl_content).text(), c = $("address a", $tl_content).attr("href") || "";
    if (a.length < 2) {
        clearTimeout($tl_article.to), $tl_article.addClass("title_required"), $tl_article.to = setTimeout(function() {
            $tl_article.removeClass("title_required");
        }, 3e3), quill.focus();
        var d = quill.scroll.descendants(TitleBlot, 0, quill.scroll.length()), e = _slicedToArray(d, 1), f = e[0];
        return quill.setSelection(f.offset(), f.length() - 1), quill.selection.scrollIntoView(), 
        showError("Title is too small");
    }
    var g = $('img[src^="data:"],video[src^="data:"]');
    if (g.length) return showError("Upload in progress.\nPlease wait...");
    var h = getPageContent();
    if (h.length > 65536) return showError("Content is too big");
    $tl_article.addClass("tl_article_saving"), updateEditable(!1);
    var i = "---------------------------TelegraPhBoundary21", j = "--" + i + '\r\nContent-Disposition: form-data; name="Data";filename="content.html"\r\nContent-type: plain/text\r\n\r\n' + h.data + "\r\n--" + i + '\r\nContent-Disposition: form-data; name="title"\r\n\r\n' + a + "\r\n--" + i + '\r\nContent-Disposition: form-data; name="author"\r\n\r\n' + b + "\r\n--" + i + '\r\nContent-Disposition: form-data; name="author_url"\r\n\r\n' + c + "\r\n--" + i + '\r\nContent-Disposition: form-data; name="save_hash"\r\n\r\n' + (T.saveHash || "") + "\r\n--" + i + '\r\nContent-Disposition: form-data; name="page_id"\r\n\r\n' + T.pageId + "\r\n--" + i + "--";
    $.ajax(T.apiUrl + "/save", {
        contentType: "multipart/form-data; boundary=" + i,
        data: j,
        type: "POST",
        dataType: "json",
        xhrFields: {
            withCredentials: !0
        },
        success: function(a) {
            return $tl_article.removeClass("tl_article_saving"), a.error ? (updateEditable(!0), 
            showError(a.error)) : (draftClear(), void (!T.pageId && a.path && (location.href = "/" + a.path)));
        },
        error: function(a) {
            return $tl_article.removeClass("tl_article_saving"), updateEditable(!0), showError("Network error");
        }
    });
}

function checkAuth() {
    $.ajax(T.apiUrl , {
        data: {
            page_id: T.pageId
        },
        type: "POST",
        dataType: "json",
        xhrFields: {
            withCredentials: !0
        },
        success: function(a) {
            if (a.save_hash && (T.saveHash = a.save_hash), (a.can_edit && T.saveHash || !T.pageId) && (a.short_name && $account.text(a.short_name), 
            $tl_article.addClass("tl_article_editable")), !T.pageId && ($tl_article.addClass("tl_article_edit"), 
            !draftGet() && a.author_name)) {
                if (a.author_url) var b = {
                    link: a.author_url
                }; else var b = {};
                var c = quill.scroll.descendants(AuthorBlot), d = _slicedToArray(c, 1), e = d[0];
                e && quill.updateContents(new Delta().retain(e.offset())["delete"](e.length()).insert(a.author_name, b), Quill.sources.USER);
            }
            if (a.auth_alert && a.short_name) {
                var f = "Success! You are now logged in as <b>" + htsc(a.short_name) + "</b> in this browser.";
                a.migrate_count > 0 && a.migrate_hash ? (f += "<br/><br/>", f += "We can also add " + a.migrate_count + " Telegraph page" + (a.migrate_count > 1 ? "s" : "") + " from this browser to your account.", 
                showAlert(f, {
                    close_btn: "Skip",
                    submit_btn: "Add",
                    submit: function() {
                        migratePages(a.migrate_hash);
                    }
                })) : showAlert(f);
            }
            pageContent = getPageContent(!0), updateEditable(isEdit());
        }
    });
}

function migratePages(a) {
    $.ajax(T.apiUrl + "/migrate", {
        data: {
            migrate_hash: a
        },
        type: "POST",
        dataType: "json",
        xhrFields: {
            withCredentials: !0
        },
        success: function(a) {
            a.migrated_count > 0 ? showAlert("Added <b>" + a.migrated_count + "</b> Telegraph page" + (a.migrated_count > 1 ? "s" : "") + ' to your account.<br><br>To see a list of your pages, talk to the <a href="https://t.me/telegraph" target="_blank">@Telegraph</a> bot on Telegram.') : hideAlert();
        }
    });
}

function toolbarUpdate(a) {
    var b = null == a ? {} : quill.getFormat(a), c = !!b.blockAuthor, d = !(!b.blockHeader && !b.blockSubheader), e = !!b["code-block"];
    if ($bold_button.toggleClass("active", !!b.bold), $bold_button.toggleClass("disabled", c || d || e), 
    $italic_button.toggleClass("active", !!b.italic), $italic_button.toggleClass("disabled", c || d || e), 
    $header_button.toggleClass("active", !!b.blockHeader), $header_button.toggleClass("disabled", c), 
    $subheader_button.toggleClass("active", !!b.blockSubheader), $subheader_button.toggleClass("disabled", c), 
    $quote_button.toggleClass("active", !(!b.blockBlockquote && !b.blockPullquote)), 
    $quote_button.toggleClass("pullquote", !!b.blockPullquote), $quote_button.toggleClass("disabled", c), 
    null != a) {
        var f = quill.scroll.descendants(LinkBlot, a.index, a.length);
        $link_button.toggleClass("active", !!f.length);
    } else $link_button.toggleClass("active", !1);
    $link_button.toggleClass("disabled", e);
}

function storageSet(a, b) {
    try {
        return localStorage.setItem(a, b), !!localStorage.getItem(a);
    } catch (c) {
        return !1;
    }
}

function storageGet(a) {
    try {
        return localStorage.getItem(a);
    } catch (b) {
        return !1;
    }
}

function storageDelete(a) {
    try {
        return localStorage.removeItem(a), !0;
    } catch (b) {
        return !1;
    }
}

function draftClear() {
    storageDelete("draft");
}

function draftSave() {
    if (!pageContent) return !1;
    if (!T.pageId) {
        var a = getPageContent(!0);
        if (pageContent != a) return pageContent = a, storageSet("draft", a);
    }
    return !1;
}

function draftGet() {
    return !T.pageId && storageGet("draft");
}

function isEdit() {
    return $tl_article.hasClass("tl_article_edit");
}

function updateEditableText(a, b) {
    "undefined" == typeof b && (b = isEdit()), b ? $(".editable_text:not(:has(.editable_input))", a).map(function() {
        var a = this.innerText, b = document.createElement("textarea");
        return b.classList.add("editable_input"), b.setAttribute("tabindex", "-1"), b.setAttribute("rows", "1"), 
        b.value = a, a || this.classList.add("empty"), $(this).empty().append(b), autosize(b), 
        b;
    }) : $(".editable_text > .editable_input", a).map(function() {
        var a = this.value, b = this.parentNode;
        return $(b).empty().text(a), b;
    });
}

function updateEditable(a) {
    if ($tl_article.toggleClass("tl_article_edit", a), updateEditableText(), window.quill && (quill.enable(a), 
    a && quill.focus()), !a) {
        var b = $("h1", $tl_content).text(), c = $("address", $tl_content).text(), d = $("address a", $tl_content).attr("href");
        $("h1", $tl_header).text(b), $("address a", $tl_header).text(c), d ? $("address a", $tl_header).attr("href", d) : $("address a", $tl_header).removeAttr("href"), 
        hideLinkTooltip(), hideFormatTooltip(), hideBlocksTooltip();
    }
}

function showLinkTooltip(a, b) {
    if (isEdit()) {
        var c = {
            index: a.offset(quill.scroll),
            length: a.length()
        };
        $tl_link_tooltip.text(decodeURI(b)), tooltipUpdatePosition($tl_link_tooltip, c, linkTTOptions), 
        $tl_link_tooltip.hasClass("move_anim") || setTimeout(function() {
            $tl_link_tooltip.addClass("move_anim");
        }, 1), $tl_link_tooltip.hasClass("shown") || setTimeout(function() {
            $tl_link_tooltip.addClass("shown");
        }, 10);
    }
}

function hideLinkTooltip() {
    $tl_link_tooltip.removeClass("move_anim shown");
}

function showFormatTooltip(a) {
    isEdit() && ($tl_tooltip.removeClass("tooltip_prompt"), tooltipUpdatePosition($tl_tooltip, a, formatTTOptions), 
    $tl_tooltip.hasClass("move_anim") || setTimeout(function() {
        $tl_tooltip.addClass("move_anim");
    }, 10), $tl_tooltip.hasClass("shown") ? tooltipUpdatePosition($tl_link_tooltip, null, linkTTOptions) : setTimeout(function() {
        $tl_tooltip.addClass("shown"), tooltipUpdatePosition($tl_link_tooltip, null, linkTTOptions);
    }, 10));
}

function hideFormatTooltip() {
    $tl_tooltip.removeClass("move_anim shown"), tooltipUpdatePosition($tl_link_tooltip, null, linkTTOptions);
}

function showBlocksTooltip(a) {
    isEdit() && ($tl_blocks.addClass("shown"), blocksUpdatePosition(a));
}

function hideBlocksTooltip() {
    $tl_blocks.removeClass("shown");
}

function hideAlert() {
    $(".tl_alert").remove();
}

function showAlert(a, b) {
    b = b || {}, b.close_btn = b.close_btn || "OK", b.submit_btn = b.submit_btn || !1, 
    b.close = b.close || hideAlert, b.submit = b.submit || b.close, hideAlert();
    var c = $('<div class="tl_alert"><main class="tl_alert_message"><section></section><aside class="tl_message_buttons"></aside></main></div>');
    $("section", c).html(a);
    var d = $("aside", c);
    if (b.close_btn) {
        var e = $('<button class="button"></button>');
        e.html(b.close_btn).click(b.close).appendTo(d);
    }
    if (b.submit_btn) {
        var f = $('<button class="button"></button>');
        f.html(b.submit_btn).click(function() {
            c.addClass("tl_alert_loading"), b.submit();
        }).appendTo(d);
    }
    c.appendTo("body");
}

function isOverElement(a, b, c) {
    if (!b || !b.hasClass("shown")) return !1;
    a.bottom = a.top + a.height, a.right = a.left + a.width;
    var d = b, e = {
        top: d._top,
        bottom: d._top + b.outerHeight(),
        left: d._left,
        right: d._left + b.outerWidth()
    };
    return !(a.left - e.right >= c || e.left - a.right >= c || a.top - e.bottom >= c || e.top - a.bottom >= c) && e;
}

function tooltipUpdatePosition(a, b, c) {
    if (c = c || {
        padding: 10,
        position: "top"
    }, b = b || a._range || null, null != b) {
        var d = quill.getBounds(b), e = $(quill.container).offset(), f = {
            width: a.outerWidth(),
            height: a.outerHeight()
        }, g = {
            width: $(window).outerWidth(),
            height: $(window).outerHeight(),
            scrolltop: document.body.scrollTop
        }, h = {
            left: 9,
            top: g.scrolltop + 9
        }, i = {
            left: g.width - f.width - 9,
            top: g.scrolltop + g.height - f.height - 9
        };
        f.left = d.left + d.width / 2 - f.width / 2;
        var j = e.left + f.left;
        j < h.left ? f.left = h.left - e.left : j > i.left && (f.left = i.left - e.left);
        var k = void 0;
        if ("top" == c.position) {
            f.top = d.top - f.height - c.padding;
            var l = e.top + f.top;
            k = !1, l < h.top && (f.top = d.bottom + c.padding, k = !0);
        } else if ("bottom" == c.position) {
            var m = !1;
            f.top = d.bottom + c.padding, (m = isOverElement(f, c.depend, c.dependPadding)) && (f.top = m.bottom + c.dependPadding);
            var n = e.top + f.top;
            k = !0, n > i.top && (f.top = d.top - f.height - c.padding, (m = isOverElement(f, c.depend, c.dependPadding)) && (f.top = m.top - f.height - c.dependPadding), 
            k = !1);
        }
        f.left = Math.round(f.left), f.top = Math.round(f.top), a._range = b, c.minDelta && Math.abs(f.left - a._left) < c.minDelta && Math.abs(f.top - a._top) < c.minDelta || (a._left = f.left, 
        a._top = f.top, a.css({
            left: f.left,
            top: f.top
        }).toggleClass("bottom", k));
    }
}

function blocksUpdatePosition(a) {
    if ("undefined" == typeof a && (a = quill.getSelection()), null != a && window.quill) {
        var b = quill.getBounds(a);
        $tl_blocks.css({
            top: b.top + b.height / 2
        });
    }
}

function htsc(a) {
    return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/\'/g, "&#39;").replace(/%/g, "&#37;");
}

function toolbarPrompt(a, b, c) {
    var d = $(".prompt_input", a), e = $(".close", a);
    d.val("").attr("placeholder", b), d.on("keydown", function(b) {
        var e = b.which || b.keyCode;
        if (27 == e) toolbarPromptHide(a); else if (13 == e) {
            var f = d.val();
            f && (c && c(f), b.preventDefault()), toolbarPromptHide(a);
        }
    }), d.on("blur", function() {
        toolbarPromptHide(a);
    }), e.on("click", function() {
        toolbarPromptHide(a);
    }), a.show().addClass("tooltip_prompt"), d.focus();
}

function toolbarPromptHide(a) {
    var b = $(".prompt_input", a), c = $(".close", a);
    b.off("keydown"), b.off("blur"), c.off("click"), a.show().removeClass("tooltip_prompt"), 
    quill.focus();
}

var _slicedToArray = function() {
    function a(a, b) {
        var c = [], d = !0, e = !1, f = void 0;
        try {
            for (var g, h = a[Symbol.iterator](); !(d = (g = h.next()).done) && (c.push(g.value), 
            !b || c.length !== b); d = !0) ;
        } catch (i) {
            e = !0, f = i;
        } finally {
            try {
                !d && h["return"] && h["return"]();
            } finally {
                if (e) throw f;
            }
        }
        return c;
    }
    return function(b, c) {
        if (Array.isArray(b)) return b;
        if (Symbol.iterator in Object(b)) return a(b, c);
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
    };
}(), _createClass = function() {
    function a(a, b) {
        for (var c = 0; c < b.length; c++) {
            var d = b[c];
            d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
            Object.defineProperty(a, d.key, d);
        }
    }
    return function(b, c, d) {
        return c && a(b.prototype, c), d && a(b, d), b;
    };
}(), _get = function a(b, c, d) {
    null === b && (b = Function.prototype);
    var e = Object.getOwnPropertyDescriptor(b, c);
    if (void 0 === e) {
        var f = Object.getPrototypeOf(b);
        return null === f ? void 0 : a(f, c, d);
    }
    if ("value" in e) return e.value;
    var g = e.get;
    if (void 0 !== g) return g.call(d);
}, ua = navigator.userAgent.toLowerCase(), browser = {
    opera: /opera/i.test(ua) || /opr/i.test(ua),
    msie: /msie/i.test(ua) && !/opera/i.test(ua) || /trident\//i.test(ua) || /edge/i.test(ua),
    msie_edge: /edge/i.test(ua) && !/opera/i.test(ua),
    mozilla: /firefox/i.test(ua),
    chrome: /chrome/i.test(ua) && !/edge/i.test(ua),
    safari: !/chrome/i.test(ua) && /webkit|safari|khtml/i.test(ua),
    iphone: /iphone/i.test(ua),
    ipod: /ipod/i.test(ua),
    ipad: /ipad/i.test(ua),
    android: /android/i.test(ua),
    mobile: /iphone|ipod|ipad|opera mini|opera mobi|iemobile|android/i.test(ua),
    safari_mobile: /iphone|ipod|ipad/i.test(ua),
    opera_mobile: /opera mini|opera mobi/i.test(ua),
    opera_mini: /opera mini/i.test(ua),
    mac: /mac/i.test(ua)
}, Inline = Quill["import"]("blots/inline"), Block = Quill["import"]("blots/block"), BlockEmbed = Quill["import"]("blots/block/embed"), Embed = Quill["import"]("blots/embed"), TextBlot = Quill["import"]("blots/text"), CodeBlock = Quill["import"]("formats/code-block"), ListItem = Quill["import"]("formats/list/item"), Parchment = Quill["import"]("parchment"), Delta = Quill["import"]("delta"), Keyboard = Quill["import"]("modules/keyboard"), LinkBlot = function(a) {
    function b(a, c) {
        _classCallCheck(this, b);
        var d = _possibleConstructorReturn(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this, a));
        return $(a).on("mouseover", function() {
            showLinkTooltip(d, c);
        }), $(a).on("mouseout", function() {
            hideLinkTooltip();
        }), d;
    }
    return _inherits(b, a), _createClass(b, null, [ {
        key: "create",
        value: function(a) {
            var c = _get(b.__proto__ || Object.getPrototypeOf(b), "create", this).call(this, a);
            a = this.sanitize(a), c.setAttribute("href", a);
            var d = a.substr(0, 1);
            return "/" != d && "#" != d && "tg://" != a.substr(0, 5) && "mailto:" != a.substr(0, 7) && c.setAttribute("target", "_blank"), 
            c;
        }
    }, {
        key: "formats",
        value: function(a) {
            return a.getAttribute("href");
        }
    }, {
        key: "sanitize",
        value: function(a) {
            return _sanitize(a, [ "http", "https", "tg", "mailto" ]) ? relativeUrl(a) : "about:blank";
        }
    } ]), _createClass(b, [ {
        key: "detach",
        value: function() {
            $(this.domNode).off("mouseover mouseout"), _get(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "detach", this).call(this), 
            hideLinkTooltip();
        }
    }, {
        key: "format",
        value: function(a, c) {
            return a === this.statics.blotName && c ? (c = this.constructor.sanitize(c), this.domNode.setAttribute("href", c), 
            void this.domNode.setAttribute("data-title", c)) : _get(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "format", this).call(this, a, c);
        }
    } ]), b;
}(Inline);

LinkBlot.blotName = "link", LinkBlot.tagName = "a", Quill.register(LinkBlot);

var BreakBlot = function(a) {
    function b() {
        return _classCallCheck(this, b), _possibleConstructorReturn(this, (b.__proto__ || Object.getPrototypeOf(b)).apply(this, arguments));
    }
    return _inherits(b, a), b;
}(Embed);

BreakBlot.blotName = "textBreak", BreakBlot.tagName = "br", BreakBlot.className = "inline", 
Quill.register(BreakBlot);

var SingleLineBlot = function(a) {
    function b() {
        return _classCallCheck(this, b), _possibleConstructorReturn(this, (b.__proto__ || Object.getPrototypeOf(b)).apply(this, arguments));
    }
    return _inherits(b, a), _createClass(b, [ {
        key: "replace",
        value: function(a) {
            a.children.forEach(function(a) {
                a instanceof BreakBlot && a.replaceWith(Parchment.create("text", " "));
            }), _get(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "replace", this).call(this, a);
        }
    }, {
        key: "insertAt",
        value: function(a, c, d) {
            "undefined" != typeof d && "textBreak" == c ? _get(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "insertAt", this).call(this, a, "\n") : _get(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "insertAt", this).call(this, a, c, d);
        }
    } ]), b;
}(Block), FieldBlot = function(a) {
    function b() {
        return _classCallCheck(this, b), _possibleConstructorReturn(this, (b.__proto__ || Object.getPrototypeOf(b)).apply(this, arguments));
    }
    return _inherits(b, a), b;
}(SingleLineBlot), TitleBlot = function(a) {
    function b() {
        return _classCallCheck(this, b), _possibleConstructorReturn(this, (b.__proto__ || Object.getPrototypeOf(b)).apply(this, arguments));
    }
    return _inherits(b, a), _createClass(b, [ {
        key: "formatAt",
        value: function(a, c, d, e) {
            d === this.constructor.blotName && _get(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "formatAt", this).call(this, a, c, d, e);
        }
    } ], [ {
        key: "create",
        value: function(a) {
            var c = _get(b.__proto__ || Object.getPrototypeOf(b), "create", this).call(this, a);
            return c.setAttribute("data-placeholder", "Title"), c.setAttribute("data-label", "Title"), 
            c;
        }
    } ]), b;
}(FieldBlot);

TitleBlot.blotName = "blockTitle", TitleBlot.tagName = "h1", Quill.register(TitleBlot);

var AuthorBlot = function(a) {
    function b() {
        return _classCallCheck(this, b), _possibleConstructorReturn(this, (b.__proto__ || Object.getPrototypeOf(b)).apply(this, arguments));
    }
    return _inherits(b, a), _createClass(b, [ {
        key: "formatAt",
        value: function(a, c, d, e) {
            d === this.constructor.blotName ? _get(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "formatAt", this).call(this, a, c, d, e) : "link" === d && _get(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "formatAt", this).call(this, 0, this.length(), d, e);
        }
    } ], [ {
        key: "create",
        value: function(a) {
            var c = _get(b.__proto__ || Object.getPrototypeOf(b), "create", this).call(this, a);
            return c.setAttribute("data-placeholder", "Your name"), c.setAttribute("data-label", "Author"), 
            c;
        }
    } ]), b;
}(FieldBlot);

AuthorBlot.blotName = "blockAuthor", AuthorBlot.tagName = "address", Quill.register(AuthorBlot);

var HeaderBlot = function(a) {
    function b() {
        return _classCallCheck(this, b), _possibleConstructorReturn(this, (b.__proto__ || Object.getPrototypeOf(b)).apply(this, arguments));
    }
    return _inherits(b, a), _createClass(b, [ {
        key: "optimize",
        value: function() {
            _get(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "optimize", this).call(this);
            var a = $(this.domNode).text();
            a = a.replace(/[\s_]+/g, "-"), a = a.replace(/(^-+|-+$)/g, ""), this.domNode.setAttribute("id", a);
        }
    }, {
        key: "formatAt",
        value: function(a, c, d, e) {
            ("bold" !== d && "italic" !== d && "code" !== d || !e) && _get(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "formatAt", this).call(this, a, c, d, e);
        }
    } ]), b;
}(SingleLineBlot);

HeaderBlot.blotName = "blockHeader", HeaderBlot.tagName = "h3", Quill.register(HeaderBlot);

var SubheaderBlot = function(a) {
    function b() {
        return _classCallCheck(this, b), _possibleConstructorReturn(this, (b.__proto__ || Object.getPrototypeOf(b)).apply(this, arguments));
    }
    return _inherits(b, a), b;
}(HeaderBlot);

SubheaderBlot.blotName = "blockSubheader", SubheaderBlot.tagName = "h4", Quill.register(SubheaderBlot);

var BlockquoteBlot = function(a) {
    function b() {
        return _classCallCheck(this, b), _possibleConstructorReturn(this, (b.__proto__ || Object.getPrototypeOf(b)).apply(this, arguments));
    }
    return _inherits(b, a), b;
}(Block);

BlockquoteBlot.blotName = "blockBlockquote", BlockquoteBlot.tagName = "blockquote", 
Quill.register(BlockquoteBlot);

var PullquoteBlot = function(a) {
    function b() {
        return _classCallCheck(this, b), _possibleConstructorReturn(this, (b.__proto__ || Object.getPrototypeOf(b)).apply(this, arguments));
    }
    return _inherits(b, a), b;
}(Block);

PullquoteBlot.blotName = "blockPullquote", PullquoteBlot.tagName = "aside", Quill.register(PullquoteBlot);

var CodeBlot = function(a) {
    function b() {
        return _classCallCheck(this, b), _possibleConstructorReturn(this, (b.__proto__ || Object.getPrototypeOf(b)).apply(this, arguments));
    }
    return _inherits(b, a), _createClass(b, [ {
        key: "replace",
        value: function(a) {
            a.children.forEach(function(a) {
                a instanceof BreakBlot && a.replaceWith(Parchment.create("text", "\n"));
            }), _get(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "replace", this).call(this, a);
        }
    } ]), b;
}(CodeBlock);

CodeBlot.blotName = "code-block", Quill.register(CodeBlot);

var DividerBlot = function(a) {
    function b() {
        return _classCallCheck(this, b), _possibleConstructorReturn(this, (b.__proto__ || Object.getPrototypeOf(b)).apply(this, arguments));
    }
    return _inherits(b, a), b;
}(BlockEmbed);

DividerBlot.blotName = "blockDivider", DividerBlot.tagName = "hr", Quill.register(DividerBlot);

var FigureBlot = function(a) {
    function b(a, c) {
        _classCallCheck(this, b);
        var d = _possibleConstructorReturn(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this, a));
        d.domWrapper = document.createElement("div"), d.domCursor = document.createElement("span"), 
        d.domCaption = document.createElement("figcaption"), d.domWrapper.classList.add("figure_wrapper"), 
        d.domCursor.classList.add("cursor_wrapper"), d.domCursor.setAttribute("contenteditable", "true"), 
        d.domCaption.classList.add("editable_text"), d.domCaption.setAttribute("data-placeholder", "Caption (optional)"), 
        c.caption && (d.domCaption.innerText = c.caption), d.domNode.appendChild(d.domWrapper), 
        d.domNode.appendChild(d.domCursor), d.domNode.appendChild(d.domCaption), setTimeout(function() {
            updateEditableText(d.domNode);
        }, 1);
        var e = !1;
        return c.image ? (d.appendImgNode(c.image), e = d.uploadData(c.image)) : c.video ? (d.appendVideoNode(c.video), 
        e = d.uploadData(c.video)) : c.embed && d.appendIframeNode(c.embed), e && (d.domProgress = document.createElement("div"), 
        d.domProgressBar = document.createElement("div"), d.domProgress.classList.add("file_progress"), 
        d.domProgressBar.classList.add("file_progress_bar"), d.domWrapper.classList.add("loading"), 
        d.domProgress.appendChild(d.domProgressBar), d.domWrapper.appendChild(d.domProgress), 
        d.uploadFile(e)), $(d.domWrapper).click(function() {
            if (!d.domNode.classList.contains("focus")) {
                var a = d.offset(quill.scroll);
                quill.focus(), quill.setSelection(a, 0, Quill.sources.USER);
            }
        }), $(d.domCursor).keydown(function(a) {
            var b = a.which || a.keyCode;
            if (b == Keyboard.keys.BACKSPACE) {
                var c = d.offset(quill.scroll);
                quill.deleteText(c, d.length(), Quill.sources.USER), quill.setSelection(c - 1, 0, Quill.sources.USER), 
                a.preventDefault();
            } else if (b == Keyboard.keys.ENTER) {
                var e = d.offset(quill.scroll) + d.length();
                quill.focus(), quill.insertText(e, "\n", Quill.sources.USER), quill.setSelection(e, 0, Quill.sources.USER), 
                a.preventDefault();
            }
        }), $(d.domCursor).on("paste", function(a) {
            a.stopPropagation(), a.preventDefault();
        }), $(d.domCaption).keydown(function(a) {
            var b = a.which || a.keyCode, c = $(a.target);
            if (b == Keyboard.keys.ENTER) {
                if (a.shiftKey) return;
                var e = c.selection("getPos"), f = c.val();
                if (e.start != e.end) f = f.substr(0, e.start) + f.substr(e.end), c.val(f).selection("setPos", {
                    start: f.length,
                    end: f.length
                }); else if (e.end == f.length) {
                    var g = d.offset(quill.scroll) + d.length();
                    quill.focus(), quill.insertText(g, "\n", Quill.sources.USER), quill.setSelection(g, 0, Quill.sources.USER);
                }
                a.preventDefault();
            } else if (b == Keyboard.keys.DOWN || b == Keyboard.keys.TAB || b == Keyboard.keys.RIGHT) {
                var h = c.selection("getPos"), i = c.val();
                if (h.start == h.end && h.end == i.length) {
                    var j = d.offset(quill.scroll) + d.length();
                    quill.focus(), quill.setSelection(j, 0, Quill.sources.USER), a.preventDefault();
                }
            } else if (b == Keyboard.keys.LEFT || b == Keyboard.keys.UP) {
                var k = c.selection("getPos");
                if (k.start == k.end && 0 === k.start) {
                    var l = d.offset(quill.scroll) - 1;
                    quill.focus(), quill.setSelection(l, 0, Quill.sources.USER), a.preventDefault();
                }
            }
        }), $(d.domCaption).on("paste", function(a) {
            a.stopPropagation();
        }), $(d.domCaption).on("keyup drop change input textInput paste cut", function(a) {
            $(d.domCaption).toggleClass("empty", !a.target.value), autosize.update(a.target), 
            draftSave();
        }), $(d.domCaption).on("mousedown touchstart", function(a) {
            d.focusCaptionInput(a);
        }), $(document).on("selectionchange", function(a) {
            var b = window.getSelection();
            b && b.focusNode === d.domCaption && b.isCollapsed && d.focusCaptionInput(a);
        }), d;
    }
    return _inherits(b, a), _createClass(b, null, [ {
        key: "create",
        value: function(a) {
            var c = _get(b.__proto__ || Object.getPrototypeOf(b), "create", this).call(this, a);
            return c.setAttribute("contenteditable", "false"), c;
        }
    } ]), _createClass(b, [ {
        key: "focusCaptionInput",
        value: function(a) {
            if (this.domCaption.classList.contains("empty")) {
                var b = this.domCaption.querySelector(".editable_input");
                b && (a.preventDefault(), b.focus());
            }
        }
    }, {
        key: "appendImgNode",
        value: function(a) {
            var b = document.createElement("img");
            return b.setAttribute("src", this.sanitize(a)), this.domWrapper.appendChild(b), 
            b;
        }
    }, {
        key: "appendVideoNode",
        value: function(a) {
            var b = document.createElement("video");
            return b.setAttribute("src", this.sanitize(a)), b.setAttribute("preload", "auto"), 
            b.setAttribute("controls", "controls"), b.addEventListener("loadeddata", function() {
                this.mozHasAudio || this.webkitAudioDecodedByteCount || this.audioTracks && this.audioTracks.length || (this.setAttribute("autoplay", "autoplay"), 
                this.setAttribute("loop", "loop"), this.setAttribute("muted", "muted"), this.removeAttribute("controls"), 
                this.play());
            }), this.domWrapper.appendChild(b), b;
        }
    }, {
        key: "appendIframeNode",
        value: function(a) {
            var b = document.createElement("div"), c = document.createElement("div"), d = document.createElement("iframe");
            return b.classList.add("iframe_wrap"), b.appendChild(c), c.classList.add("iframe_helper"), 
            c.style.paddingTop = "56.25%", c.appendChild(d), d.setAttribute("src", this.sanitize(a)), 
            d.setAttribute("width", "640"), d.setAttribute("height", "360"), d.setAttribute("frameborder", "0"), 
            d.setAttribute("allowtransparency", "true"), d.setAttribute("allowfullscreen", "true"), 
            d.setAttribute("scrolling", "no"), this.domWrapper.appendChild(b), b;
        }
    }, {
        key: "uploadFile",
        value: function(a) {
            var b = this;
            _uploadFile(a, function(a, c) {
                var d = 0;
                c && a && (d = 100 * a / c, d = Math.min(100, d)), b.domProgressBar.style.width = d + "%";
            }, function(c) {
                if (c) {
                    var d = b.sanitize(c.src);
                    if ("video/" == a.type.substr(0, 6)) {
                        var e = b.domWrapper.querySelector("video");
                        e.setAttribute("src", d);
                    } else {
                        var f = b.domWrapper.querySelector("img");
                        f.setAttribute("src", d);
                    }
                    b.domWrapper.classList.remove("loading"), draftSave();
                }
            }, function(a) {
                return quill.deleteText(b.offset(quill.scroll), b.length(), Quill.sources.SILENT), 
                draftSave(), showError(a);
            });
        }
    }, {
        key: "uploadData",
        value: function(a) {
            var b = null;
            return !!(b = a.match(/^data:(image\/gif|image\/jpe?g|image\/png|video\/mp4);base64,(.*)$/)) && {
                type: b[1],
                base64_data: b[2]
            };
        }
    }, {
        key: "sanitize",
        value: function(a) {
            return _sanitize(a, [ "http", "https", "data" ]) ? a : "//:0";
        }
    }, {
        key: "focus",
        value: function() {
            this.domNode.classList.add("focus");
        }
    }, {
        key: "blur",
        value: function() {
            this.domNode.classList.remove("focus");
        }
    }, {
        key: "_index",
        value: function(a, b) {
            if (a === this.domCaption) return 0;
            var c = 0;
            return a.nodeType == a.TEXT_NODE && (c += b >= 0 ? b : a.data.length), a.previousSibling ? c + this._index(a.previousSibling, -1) : a.parentNode ? c + this._index(a.parentNode, -1) : 0;
        }
    }, {
        key: "_position",
        value: function(a, b) {
            if (a.nodeType == a.TEXT_NODE) return b <= a.data.length ? [ a, b ] : (b -= a.data.length, 
            [ null, b ]);
            for (var c = a.firstChild; c; ) {
                var d = null, e = this._position(c, b), f = _slicedToArray(e, 2);
                if (d = f[0], b = f[1], d) return [ d, b ];
                c = c.nextSibling;
            }
            return [ a, b ];
        }
    }, {
        key: "update",
        value: function(a) {
            this.domCursor.innerHTML = "";
        }
    }, {
        key: "index",
        value: function(a, b) {
            return 0;
        }
    }, {
        key: "position",
        value: function(a, b) {
            return [ this.domCursor, 0 ];
        }
    } ], [ {
        key: "value",
        value: function c(a) {
            var c = {
                caption: ""
            }, b = a.querySelector("img");
            b && (c.image = b.src);
            var d = a.querySelector("video");
            d && (c.video = d.src);
            var e = a.querySelector("iframe");
            e && (c.embed = e.src);
            var f = a.querySelector("figcaption");
            if (f) {
                var g = f.querySelector(".editable_input");
                g ? c.caption = g.value : c.caption = f.innerText;
            }
            return c;
        }
    } ]), b;
}(BlockEmbed);

FigureBlot.blotName = "blockFigure", FigureBlot.tagName = "figure", Quill.register(FigureBlot);

var MyQuill = function(a) {
    function b() {
        return _classCallCheck(this, b), _possibleConstructorReturn(this, (b.__proto__ || Object.getPrototypeOf(b)).apply(this, arguments));
    }
    return _inherits(b, a), _createClass(b, [ {
        key: "formatLine",
        value: function() {
            for (var a, c = arguments.length, d = Array(c), e = 0; e < c; e++) d[e] = arguments[e];
            (a = _get(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "formatLine", this)).call.apply(a, [ this ].concat(d)), 
            this.updateSelection();
        }
    }, {
        key: "formatText",
        value: function() {
            for (var a, c = arguments.length, d = Array(c), e = 0; e < c; e++) d[e] = arguments[e];
            (a = _get(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "formatText", this)).call.apply(a, [ this ].concat(d)), 
            this.updateSelection();
        }
    }, {
        key: "updateSelection",
        value: function(a) {
            if (this.hasFocus()) {
                a = a || this.constructor.sources.SILENT;
                var b = this.getSelection(!0);
                this.setSelection(++b.index, b.length, a), this.setSelection(--b.index, b.length, a);
            }
        }
    } ]), b;
}(Quill), 
$tl_page = $(".tl_page"),
 $tl_article = $(".tl_article"), 
 $tl_header = $(".tl_article_header"), 
 $tl_content = $(".tl_article_content"), 
 $tl_tooltip = $("#_tl_tooltip"), 
 $tl_blocks = $("#_tl_blocks"), 
 $tl_link_tooltip = $("#_tl_link_tooltip"), 
 $bold_button = $("#_bold_button"), 
 $italic_button = $("#_italic_button"), 
 $link_button = $("#_link_button"), 
$header_button = $("#_header_button"),
 $subheader_button = $("#_subheader_button"), 
 $quote_button = $("#_quote_button"), 
$image_button = $("#_image_button"), 

 $edit_button = $("#_edit_button"), 
 $publish_button = $("#_publish_button"), 
 $account = $(".account"),
  $error_msg = $("#_error_msg"), formatTTOptions = {
    padding: 10,
    position: browser.mobile ? "bottom" : "top",
    minDelta: 5
}, linkTTOptions = {
    padding: 7,
    position: "bottom",
    depend: $tl_tooltip,
    dependPadding: 10
};

$tl_tooltip.mouseover(function(a) {
    var b = a.target;
    "BUTTON" != a.target.tagName || a.target.classList.contains("disabled") || ($tl_tooltip.attr("data-hover", b.id).addClass("hover"), 
    setTimeout(function() {
        $tl_tooltip.addClass("hover_anim");
    }, 1), clearTimeout($tl_tooltip.to));
}), $tl_tooltip.mouseout(function(a) {
    var b = a.target;
    "BUTTON" == b.tagName && ($tl_tooltip.removeClass("hover"), $tl_tooltip.to = setTimeout(function() {
        $tl_tooltip.removeClass("hover_anim");
    }, 70));
}), 
$bold_button.click(function(a) {
    var b = a.target, c = b.classList.contains("active");
    a.preventDefault();
    quill.getSelection(!0);
    quill.format("bold", !c), quill.updateSelection(Quill.sources.API);
}), $italic_button.click(function(a) {
    var b = a.target, c = b.classList.contains("active");
    a.preventDefault();
    quill.getSelection(!0);
    quill.format("italic", !c), quill.updateSelection(Quill.sources.API);
}), $link_button.click(function(a) {
    var b = a.target, c = b.classList.contains("active");
    a.preventDefault();
    var d = quill.getSelection(!0);
    if (c) {
        var e = quill.scroll.descendants(LinkBlot, d.index, d.length);
        e.forEach(function(a) {
            var b = a.offset(quill.scroll), c = a.length();
            quill.formatText(b, c, "link", !1);
        }), toolbarUpdate(d);
    } else toolbarPrompt($tl_tooltip, "Paste or type a link...", function(a) {
        a = a.trim(), "#" != a.substr(0, 1) && "/" != a.substr(0, 1) && "http://" != a.substr(0, 7) && "https://" != a.substr(0, 8) && "tg://" != a.substr(0, 5) && "mailto:" != a.substr(0, 7) && (a = a.indexOf("@") > 0 ? "mailto:" + a : "http://" + a), 
        quill.focus(), quill.format("link", a), toolbarUpdate(d);
    });
}), $header_button.click(function(a) {
    var b = a.target, c = b.classList.contains("active");
    a.preventDefault();
    var d = quill.getSelection(!0);
    quill.format("blockHeader", !c);
    var e = quill.scroll.descendants(HeaderBlot, d.index, d.length);
    e.forEach(function(a) {
        var b = a.offset(quill.scroll), c = a.length();
        quill.formatText(b, c, {
            bold: !1,
            italic: !1,
            code: !1
        }, Quill.sources.SILENT);
    }), quill.updateSelection(Quill.sources.API);
}), $subheader_button.click(function(a) {
    var b = a.target, c = b.classList.contains("active");
    a.preventDefault();
    var d = quill.getSelection(!0);
    quill.format("blockSubheader", !c);
    var e = quill.scroll.descendants(SubheaderBlot, d.index, d.length);
    e.forEach(function(a) {
        var b = a.offset(quill.scroll), c = a.length();
        quill.formatText(b, c, {
            bold: !1,
            italic: !1,
            code: !1
        }, Quill.sources.SILENT);
    }), quill.updateSelection(Quill.sources.API);
}), $quote_button.click(function(a) {
    var b = a.target, c = b.classList.contains("active"), d = b.classList.contains("pullquote");
    a.preventDefault();
    quill.getSelection(!0);
    c ? quill.format("blockPullquote", !d) : quill.format("blockBlockquote", !0), quill.updateSelection(Quill.sources.API);
}), $image_button.click(function() {
    var a = quill.container.querySelector("input.ql-image[type=file][data-status=ready]");
    null == a && (a = document.createElement("input"), a.setAttribute("type", "file"), 
    a.setAttribute("accept", browser.safari_mobile ? "image/gif, image/jpeg, image/jpg, image/png" : "image/gif, image/jpeg, image/jpg, image/png, video/mp4"), 
    a.classList.add("ql-image"), a.addEventListener("change", function() {
        if (null != a.files && null != a.files[0]) {
            var b = a.files[0];
            updatePhoto(b, function(b) {
                if (quill.fileSizeLimit && b.size > quill.fileSizeLimit) return quill.fileSizeLimitCallback && quill.fileSizeLimitCallback();
                var c = new FileReader();
                c.onload = function(b) {
                    var c = getFigureValueByUrl(b.target.result);
                    if (c) {
                        var d = quill.getSelection(!0);
                        quill.updateContents(new Delta().retain(d.index)["delete"](d.length).insert({
                            blockFigure: c
                        }), Quill.sources.USER);
                    } else showError("Invalid file format");
                    a.value = "", a.setAttribute("data-status", "ready");
                }, c.readAsDataURL(b);
            });
        }
    }), quill.container.appendChild(a)), a.setAttribute("data-status", "busy"), a.click();
}), 
//$("#_embed_button")
$(document).on("click #_embed_button", function(a) {
//$embed_button.click(function(a) {
    
    var b = quill.getSelection(!0), c = quill.scroll.line(b.index), d = _slicedToArray(c, 1), e = d[0];
    if (e) {
        var f = $(e.domNode).text();
        f || (e.domNode.setAttribute("data-placeholder", "Paste a YouTube, Vimeo or Twitter link, and press Enter"), 
        $(e.domNode).addClass("placeholder_once empty"), hideBlocksTooltip());
    }
}), 
$publish_button.click(function() {
    savePage();
}), $edit_button.click(function() {
    updateEditable(!0);
}), $(window).on("scroll resize", function() {
    tooltipUpdatePosition($tl_tooltip, null, formatTTOptions), tooltipUpdatePosition($tl_link_tooltip, null, linkTTOptions);
}), new Image().src = window.devicePixelRatio >= 2 ? "../rasm/icons.png?1" : "../rasm/icons.png?1";

var quill = initQuill(), pageContent = !1;

browser.mobile && $(document.body).addClass("mobile"), checkAuth();